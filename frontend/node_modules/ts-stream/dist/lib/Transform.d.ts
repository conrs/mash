/**
 * Promise-based object stream with seamless support for back-pressure and error
 * handling, written in Typescript.
 *
 * Copyright (C) 2015 Martin Poelstra
 * License: MIT
 */
import { Readable, Writable } from "./Stream";
export declare type Transform<In, Out> = (readable: Readable<In>, writable: Writable<Out>) => void;
export declare function compose<In, Middle, Out>(t1: Transform<In, Middle>, t2: Transform<Middle, Out>): Transform<In, Out>;
export declare function map<T, R>(readable: Readable<T>, writable: Writable<R>, mapper: (value: T) => R | PromiseLike<R>, ender?: (error?: Error) => void | PromiseLike<void>, aborter?: (error: Error) => void): void;
export declare function filter<T>(readable: Readable<T>, writable: Writable<T>, filterer: (value: T) => boolean | PromiseLike<boolean>, ender?: (error?: Error) => void | PromiseLike<void>, aborter?: (error: Error) => void): void;
export default Transform;
